// importing needed project & angular modules
import { Injectable } from '@angular/core';

// importing data example for music info
import exampledata from '../../data/sample-music-data.json';

// importing needed models used in service
import { Album } from '../models/Album';
import { Artist } from '../models/Artist';
import { Track } from '../models/Track';

// A service that manages artists, albums, & tracks
// provides methods to retrieve, create, update, & delete music data
@Injectable({ providedIn: 'root' })
export class MusicServiceService {
	// Private arrays to store artist & album data
	private readonly artists: Artist[] = [];
	private readonly albums: Album[] = [];

	// constructor
	constructor() {
		this.createArtists();
		this.createAlbums();
	}

	// Creates & adds artist data to artists array
	// Currently only adds 'The Beatles'
	private createArtists(): void {
		this.artists.push(new Artist(0, 'The Beatles'));
	}

	// Creates albums by filtering example data & adding only those
	// associated with 'The Beatles' to albums array
	
	private createAlbums(): void {
		exampledata.forEach((data: any) => {
			if (data.artist === 'The Beatles') {
				// Map track data to Track objects
				const tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));
				// Create & store album
				const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);
				this.albums.push(album);
			}
		});
	}

	/**
     * Retrieves all stored artists
     * @returns An array of Artist objects
     */
	public getArtists(): Artist[] {
		return this.artists;
	}

	/**
     * Retrieves all albums associated with given artist
     * @param artist - Name of artist
     * @returns Array of Album objects
     */
	public getAlbums(artist: string): Album[] {
		return this.albums;
	}

	/**
     * Retrieves specific album based on artist name & album ID
     * @param artist - Name of artist
     * @param id - ID of album
     * @returns Requested Album object or undefined if not found
     */
	public getAlbum(artist: string, id: number): Album | undefined {
		const album = this.albums.find((a) => a.Artist === artist && a.Id === id);

		if (album) {
			// Create copy of album with new Track instances
			const tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));
			return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);
		}

		return undefined;
	}

	/**
     * Adds new album to albums array
     * @param album - Album object to be added
     */
	public createAlbum(album: Album): void {
		this.albums.push(album);
	}

	/**
     * Updates existing album in albums array
     * @param album - Updated Album object
     */
	public updateAlbum(album: Album): void {
		const index = this.albums.findIndex((a) => a.Id === album.Id);

		if (index !== -1) {
			this.albums.splice(index, 1, album);// Replaces the old album with the new one
		}
	}

	/**
     * Deletes album from albums array based on its ID
     * @param id - ID of album to delete
     * @param artist - Artist associated with album
     */
	public deleteAlbum(id: number, artist: string): void {
		const index = this.albums.findIndex((a) => a.Id === id);

		if (index !== -1) {
			this.albums.splice(index, 1);// Removes the album from the array
		}
	}
}
